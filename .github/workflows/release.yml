name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run vet
      run: go vet ./...

    - name: Run tests
      run: go test -race -coverprofile=coverage.out ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Check out code
      uses: actions/checkout@v4

    - name: Build library
      run: go build -v ./...

    - name: Build examples
      run: |
        mkdir -p build/examples
        cd examples/basic_payment && go build -o ../../build/examples/basic_payment .
        cd ../threeds_payment && go build -o ../../build/examples/threeds_payment .
        cd ../checkout_form && go build -o ../../build/examples/checkout_form .
        cd ../card_management && go build -o ../../build/examples/card_management .
        cd ../refund_cancel && go build -o ../../build/examples/refund_cancel .

    - name: Create examples archive
      run: |
        cd build
        tar -czf examples-${{ github.ref_name }}.tar.gz examples/
        ls -la

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: examples-${{ github.ref_name }}
        path: build/examples-${{ github.ref_name }}.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: examples-${{ github.ref_name }}

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> RELEASE_CHANGELOG.md
        else
          echo "## Initial Release" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "First release of iyzipay-go - Go client library for Ä°yzico Payment Gateway" >> RELEASE_CHANGELOG.md
        fi
        
        echo "" >> RELEASE_CHANGELOG.md
        echo "## Installation" >> RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        echo '```bash' >> RELEASE_CHANGELOG.md
        echo "go get github.com/parevo-lab/iyzipay-go@$VERSION" >> RELEASE_CHANGELOG.md
        echo '```' >> RELEASE_CHANGELOG.md
        
        cat RELEASE_CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.changelog.outputs.version }}
        body_path: RELEASE_CHANGELOG.md
        files: |
          examples-${{ github.ref_name }}.tar.gz
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Release notification
      run: |
        echo "ðŸŽ‰ Successfully released iyzipay-go ${{ steps.version.outputs.version }}"
        echo "ðŸ“¦ Installation: go get github.com/parevo-lab/iyzipay-go@${{ steps.version.outputs.version }}"
        echo "ðŸ”— Release URL: https://github.com/parevo-lab/iyzipay-go/releases/tag/${{ steps.version.outputs.version }}"